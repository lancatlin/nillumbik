// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: site.sql

package db

import (
	"context"
)

const countSites = `-- name: CountSites :one
SELECT COUNT(*) FROM sites
`

func (q *Queries) CountSites(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countSites)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createSite = `-- name: CreateSite :one
INSERT INTO sites (code, block, name, location, tenure, forest)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, code, block, name, location, tenure, forest
`

type CreateSiteParams struct {
	Code     string      `json:"code"`
	Block    int32       `json:"block"`
	Name     *string     `json:"name"`
	Location interface{} `json:"location"`
	Tenure   TenureType  `json:"tenure"`
	Forest   ForestType  `json:"forest"`
}

func (q *Queries) CreateSite(ctx context.Context, arg CreateSiteParams) (Site, error) {
	row := q.db.QueryRow(ctx, createSite,
		arg.Code,
		arg.Block,
		arg.Name,
		arg.Location,
		arg.Tenure,
		arg.Forest,
	)
	var i Site
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Block,
		&i.Name,
		&i.Location,
		&i.Tenure,
		&i.Forest,
	)
	return i, err
}

const deleteSite = `-- name: DeleteSite :exec
DELETE FROM sites
WHERE id = $1
`

func (q *Queries) DeleteSite(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteSite, id)
	return err
}

const deleteSiteByCode = `-- name: DeleteSiteByCode :exec
DELETE FROM sites
WHERE code = $1
`

func (q *Queries) DeleteSiteByCode(ctx context.Context, code string) error {
	_, err := q.db.Exec(ctx, deleteSiteByCode, code)
	return err
}

const getSite = `-- name: GetSite :one
SELECT id, code, block, name, location, tenure, forest FROM sites
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSite(ctx context.Context, id int64) (Site, error) {
	row := q.db.QueryRow(ctx, getSite, id)
	var i Site
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Block,
		&i.Name,
		&i.Location,
		&i.Tenure,
		&i.Forest,
	)
	return i, err
}

const getSiteByCode = `-- name: GetSiteByCode :one
SELECT id, code, block, name, location, tenure, forest FROM sites
WHERE code = $1 LIMIT 1
`

func (q *Queries) GetSiteByCode(ctx context.Context, code string) (Site, error) {
	row := q.db.QueryRow(ctx, getSiteByCode, code)
	var i Site
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Block,
		&i.Name,
		&i.Location,
		&i.Tenure,
		&i.Forest,
	)
	return i, err
}

const getSiteIDByCode = `-- name: GetSiteIDByCode :one
SELECT id FROM sites
WHERE code = $1 LIMIT 1
`

func (q *Queries) GetSiteIDByCode(ctx context.Context, code string) (int64, error) {
	row := q.db.QueryRow(ctx, getSiteIDByCode, code)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const listSites = `-- name: ListSites :many
SELECT id, code, block, name, location, tenure, forest FROM sites
ORDER BY code
`

func (q *Queries) ListSites(ctx context.Context) ([]Site, error) {
	rows, err := q.db.Query(ctx, listSites)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Site
	for rows.Next() {
		var i Site
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Block,
			&i.Name,
			&i.Location,
			&i.Tenure,
			&i.Forest,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchSites = `-- name: SearchSites :many
SELECT id, code, block, name, location, tenure, forest FROM sites
WHERE code ILIKE $1 OR name ILIKE $1
ORDER BY code
`

func (q *Queries) SearchSites(ctx context.Context, code string) ([]Site, error) {
	rows, err := q.db.Query(ctx, searchSites, code)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Site
	for rows.Next() {
		var i Site
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Block,
			&i.Name,
			&i.Location,
			&i.Tenure,
			&i.Forest,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSite = `-- name: UpdateSite :one
UPDATE sites
SET code = $2, block = $3, name = $4, location = $5, tenure = $6, forest = $7
WHERE id = $1
RETURNING id, code, block, name, location, tenure, forest
`

type UpdateSiteParams struct {
	ID       int64       `json:"id"`
	Code     string      `json:"code"`
	Block    int32       `json:"block"`
	Name     *string     `json:"name"`
	Location interface{} `json:"location"`
	Tenure   TenureType  `json:"tenure"`
	Forest   ForestType  `json:"forest"`
}

func (q *Queries) UpdateSite(ctx context.Context, arg UpdateSiteParams) (Site, error) {
	row := q.db.QueryRow(ctx, updateSite,
		arg.ID,
		arg.Code,
		arg.Block,
		arg.Name,
		arg.Location,
		arg.Tenure,
		arg.Forest,
	)
	var i Site
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Block,
		&i.Name,
		&i.Location,
		&i.Tenure,
		&i.Forest,
	)
	return i, err
}

const updateSiteByCode = `-- name: UpdateSiteByCode :one
UPDATE sites
SET block = $2, name = $3, location = $4, tenure = $5, forest = $6
WHERE code = $1
RETURNING id, code, block, name, location, tenure, forest
`

type UpdateSiteByCodeParams struct {
	Code     string      `json:"code"`
	Block    int32       `json:"block"`
	Name     *string     `json:"name"`
	Location interface{} `json:"location"`
	Tenure   TenureType  `json:"tenure"`
	Forest   ForestType  `json:"forest"`
}

func (q *Queries) UpdateSiteByCode(ctx context.Context, arg UpdateSiteByCodeParams) (Site, error) {
	row := q.db.QueryRow(ctx, updateSiteByCode,
		arg.Code,
		arg.Block,
		arg.Name,
		arg.Location,
		arg.Tenure,
		arg.Forest,
	)
	var i Site
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Block,
		&i.Name,
		&i.Location,
		&i.Tenure,
		&i.Forest,
	)
	return i, err
}
